"use strict";(()=>{var e={};e.id=240,e.ids=[240],e.modules={145:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},79:e=>{e.exports=import("openai")},130:(e,r,t)=>{t.a(e,async(e,a)=>{try{t.r(r),t.d(r,{config:()=>u,default:()=>d,routeModule:()=>l});var s=t(802),n=t(44),o=t(249),i=t(26),c=e([i]);i=(c.then?(await c)():c)[0];let d=(0,o.l)(i,"default"),u=(0,o.l)(i,"config"),l=new s.PagesAPIRouteModule({definition:{kind:n.x.PAGES_API,page:"/api/feedback",pathname:"/api/feedback",bundlePath:"",filename:""},userland:i});a()}catch(e){a(e)}})},26:(e,r,t)=>{t.a(e,async(e,a)=>{try{t.r(r),t.d(r,{default:()=>handler});var s=t(79),n=e([s]);s=(n.then?(await n)():n)[0];let o=new s.OpenAI({apiKey:process.env.OPENAI_API_KEY});async function handler(e,r){if("POST"!==e.method)return r.status(405).json({error:"Method not allowed"});let{messages:t}=e.body;if(!t||!Array.isArray(t))return r.status(400).json({error:"Invalid request format"});try{let e=await o.chat.completions.create({model:"gpt-4",messages:t,temperature:.7}),a=e.choices[0]?.message?.content,s=a?.match(/\{[\s\S]*\}/);if(!s)return r.status(500).json({error:"Failed to parse structured feedback from AI response."});let n=JSON.parse(s[0]);return r.status(200).json(n)}catch(e){return console.error("OpenAI API Error:",e),r.status(500).json({error:e.message||"Internal Server Error"})}}a()}catch(e){a(e)}})}};var r=require("../../webpack-api-runtime.js");r.C(e);var __webpack_exec__=e=>r(r.s=e),t=r.X(0,[222],()=>__webpack_exec__(130));module.exports=t})();